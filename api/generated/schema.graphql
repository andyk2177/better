### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Course {
  class_number: Int!
  createdAt: DateTime!
  id: ID!
  name: String!
  slug: String
  term: Int!
  title: String
  updatedAt: DateTime!
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

input CourseCreateInput {
  catalog_number: Int!
  class_number: Int!
  component: String!
  createdAt: DateTime
  id: ID
  messages: CourseMessageCreateManyWithoutMessagesInput
  name: String!
  slug: String
  subject: String!
  term: Int!
  title: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
}

input CourseCreateManyWithoutCoursesInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutUsersInput!]
}

input CourseCreateOneWithoutCourseInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutMessagesInput
}

input CourseCreateWithoutMessagesInput {
  catalog_number: Int!
  class_number: Int!
  component: String!
  createdAt: DateTime
  id: ID
  name: String!
  slug: String
  subject: String!
  term: Int!
  title: String
  updatedAt: DateTime
  users: UserCreateManyWithoutUsersInput
}

input CourseCreateWithoutUsersInput {
  catalog_number: Int!
  class_number: Int!
  component: String!
  createdAt: DateTime
  id: ID
  messages: CourseMessageCreateManyWithoutMessagesInput
  name: String!
  slug: String
  subject: String!
  term: Int!
  title: String
  updatedAt: DateTime
}

input CourseFilter {
  every: CourseWhereInput
  none: CourseWhereInput
  some: CourseWhereInput
}

type CourseMessage {
  course: Course!
  createdAt: DateTime!
  id: ID!
  message: String!
  updatedAt: DateTime!
  user: User!
}

input CourseMessageCreateManyWithoutCourseMessagesInput {
  connect: [CourseMessageWhereUniqueInput!]
  create: [CourseMessageCreateWithoutUserInput!]
}

input CourseMessageCreateManyWithoutMessagesInput {
  connect: [CourseMessageWhereUniqueInput!]
  create: [CourseMessageCreateWithoutCourseInput!]
}

input CourseMessageCreateWithoutCourseInput {
  createdAt: DateTime
  id: ID
  message: String!
  updatedAt: DateTime
  user: UserCreateOneWithoutUserInput!
}

input CourseMessageCreateWithoutUserInput {
  course: CourseCreateOneWithoutCourseInput!
  createdAt: DateTime
  id: ID
  message: String!
  updatedAt: DateTime
}

input CourseMessageFilter {
  every: CourseMessageWhereInput
  none: CourseMessageWhereInput
  some: CourseMessageWhereInput
}

input CourseMessageScalarWhereInput {
  AND: [CourseMessageScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringFilter
  NOT: [CourseMessageScalarWhereInput!]
  OR: [CourseMessageScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input CourseMessageUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
}

input CourseMessageUpdateManyWithoutCourseInput {
  connect: [CourseMessageWhereUniqueInput!]
  create: [CourseMessageCreateWithoutCourseInput!]
  delete: [CourseMessageWhereUniqueInput!]
  deleteMany: [CourseMessageScalarWhereInput!]
  disconnect: [CourseMessageWhereUniqueInput!]
  set: [CourseMessageWhereUniqueInput!]
  update: [CourseMessageUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [CourseMessageUpdateManyWithWhereNestedInput!]
  upsert: [CourseMessageUpsertWithWhereUniqueWithoutCourseInput!]
}

input CourseMessageUpdateManyWithoutUserInput {
  connect: [CourseMessageWhereUniqueInput!]
  create: [CourseMessageCreateWithoutUserInput!]
  delete: [CourseMessageWhereUniqueInput!]
  deleteMany: [CourseMessageScalarWhereInput!]
  disconnect: [CourseMessageWhereUniqueInput!]
  set: [CourseMessageWhereUniqueInput!]
  update: [CourseMessageUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CourseMessageUpdateManyWithWhereNestedInput!]
  upsert: [CourseMessageUpsertWithWhereUniqueWithoutUserInput!]
}

input CourseMessageUpdateManyWithWhereNestedInput {
  data: CourseMessageUpdateManyDataInput!
  where: CourseMessageScalarWhereInput!
}

input CourseMessageUpdateWithoutCourseDataInput {
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
  user: UserUpdateOneRequiredWithoutCourseMessagesInput
}

input CourseMessageUpdateWithoutUserDataInput {
  course: CourseUpdateOneRequiredWithoutMessagesInput
  createdAt: DateTime
  id: ID
  message: String
  updatedAt: DateTime
}

input CourseMessageUpdateWithWhereUniqueWithoutCourseInput {
  data: CourseMessageUpdateWithoutCourseDataInput!
  where: CourseMessageWhereUniqueInput!
}

input CourseMessageUpdateWithWhereUniqueWithoutUserInput {
  data: CourseMessageUpdateWithoutUserDataInput!
  where: CourseMessageWhereUniqueInput!
}

input CourseMessageUpsertWithWhereUniqueWithoutCourseInput {
  create: CourseMessageCreateWithoutCourseInput!
  update: CourseMessageUpdateWithoutCourseDataInput!
  where: CourseMessageWhereUniqueInput!
}

input CourseMessageUpsertWithWhereUniqueWithoutUserInput {
  create: CourseMessageCreateWithoutUserInput!
  update: CourseMessageUpdateWithoutUserDataInput!
  where: CourseMessageWhereUniqueInput!
}

input CourseMessageWhereInput {
  AND: [CourseMessageWhereInput!]
  course: CourseWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  message: StringFilter
  NOT: [CourseMessageWhereInput!]
  OR: [CourseMessageWhereInput!]
  updatedAt: DateTimeFilter
  user: UserWhereInput
}

input CourseMessageWhereUniqueInput {
  id: ID
}

input CourseScalarWhereInput {
  AND: [CourseScalarWhereInput!]
  catalog_number: IntFilter
  class_number: IntFilter
  component: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  messages: CourseMessageFilter
  name: StringFilter
  NOT: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  slug: NullableStringFilter
  subject: StringFilter
  term: IntFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input CourseUpdateInput {
  catalog_number: Int
  class_number: Int
  component: String
  createdAt: DateTime
  id: ID
  messages: CourseMessageUpdateManyWithoutCourseInput
  name: String
  slug: String
  subject: String
  term: Int
  title: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutCoursesInput
}

input CourseUpdateManyDataInput {
  catalog_number: Int
  class_number: Int
  component: String
  createdAt: DateTime
  id: ID
  name: String
  slug: String
  subject: String
  term: Int
  title: String
  updatedAt: DateTime
}

input CourseUpdateManyWithoutUsersInput {
  connect: [CourseWhereUniqueInput!]
  create: [CourseCreateWithoutUsersInput!]
  delete: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  disconnect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  update: [CourseUpdateWithWhereUniqueWithoutUsersInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueWithoutUsersInput!]
}

input CourseUpdateManyWithWhereNestedInput {
  data: CourseUpdateManyDataInput!
  where: CourseScalarWhereInput!
}

input CourseUpdateOneRequiredWithoutMessagesInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutMessagesInput
  update: CourseUpdateWithoutMessagesDataInput
  upsert: CourseUpsertWithoutMessagesInput
}

input CourseUpdateWithoutMessagesDataInput {
  catalog_number: Int
  class_number: Int
  component: String
  createdAt: DateTime
  id: ID
  name: String
  slug: String
  subject: String
  term: Int
  title: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutCoursesInput
}

input CourseUpdateWithoutUsersDataInput {
  catalog_number: Int
  class_number: Int
  component: String
  createdAt: DateTime
  id: ID
  messages: CourseMessageUpdateManyWithoutCourseInput
  name: String
  slug: String
  subject: String
  term: Int
  title: String
  updatedAt: DateTime
}

input CourseUpdateWithWhereUniqueWithoutUsersInput {
  data: CourseUpdateWithoutUsersDataInput!
  where: CourseWhereUniqueInput!
}

input CourseUpsertWithoutMessagesInput {
  create: CourseCreateWithoutMessagesInput!
  update: CourseUpdateWithoutMessagesDataInput!
}

input CourseUpsertWithWhereUniqueWithoutUsersInput {
  create: CourseCreateWithoutUsersInput!
  update: CourseUpdateWithoutUsersDataInput!
  where: CourseWhereUniqueInput!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  catalog_number: IntFilter
  class_number: IntFilter
  component: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  messages: CourseMessageFilter
  name: StringFilter
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  slug: NullableStringFilter
  subject: StringFilter
  term: IntFilter
  title: NullableStringFilter
  updatedAt: DateTimeFilter
  users: UserFilter
}

input CourseWhereUniqueInput {
  class_number: Int
  id: ID
  slug: String
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  addUserToCourse(course_id: ID, user_id: ID): User!
  createCourse(data: CourseCreateInput): Course!
  createCourseMessage(course_id: ID, message: String): CourseMessage!
  createOneCourse(data: CourseCreateInput!): Course!
  createOneUser(data: UserCreateInput!): User!
  deleteOneCourse(where: CourseWhereUniqueInput!): Course
  deleteOneUser(where: UserWhereUniqueInput!): User
  removeUserFromCourse(course_id: ID, user_id: ID): User!
  updateOneCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  uploadCourseRoster(file: Upload): String!
  upsertOneCourse(create: CourseCreateInput!, update: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courseMessage(where: CourseMessageWhereUniqueInput!): CourseMessage
  courseMessages(after: ID, before: ID, first: Int, last: Int, skip: Int): [CourseMessage!]!
  courses(after: ID, before: ID, first: Int, last: Int, skip: Int): [Course!]!
  findCourse(id: String): Course!
  getCourseMessages(course_id: ID): [CourseMessage!]!
  getCoursePeople(course_id: String): [User!]!
  loggedInUser: User
  user(where: UserWhereUniqueInput!): User
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
  usersNotInCourse(name: String): [User!]!
}

enum Role {
  ADMIN
  PROFESSOR
  STUDENT
  TEACHING_ASSISSTANT
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  picture: String
  updatedAt: DateTime!
}

input UserCreateInput {
  courseMessages: CourseMessageCreateManyWithoutCourseMessagesInput
  courses: CourseCreateManyWithoutCoursesInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserCreateManyWithoutUsersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCoursesInput!]
}

input UserCreateOneWithoutUserInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCourseMessagesInput
}

input UserCreateWithoutCourseMessagesInput {
  courses: CourseCreateManyWithoutCoursesInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserCreateWithoutCoursesInput {
  courseMessages: CourseMessageCreateManyWithoutCourseMessagesInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  courseMessages: CourseMessageFilter
  courses: CourseFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  picture: NullableStringFilter
  role: Role
  updatedAt: DateTimeFilter
}

input UserUpdateInput {
  courseMessages: CourseMessageUpdateManyWithoutUserInput
  courses: CourseUpdateManyWithoutUsersInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserUpdateManyDataInput {
  createdAt: DateTime
  email: String
  id: ID
  name: String
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserUpdateManyWithoutCoursesInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutCoursesInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCoursesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCoursesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneRequiredWithoutCourseMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCourseMessagesInput
  update: UserUpdateWithoutCourseMessagesDataInput
  upsert: UserUpsertWithoutCourseMessagesInput
}

input UserUpdateWithoutCourseMessagesDataInput {
  courses: CourseUpdateManyWithoutUsersInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserUpdateWithoutCoursesDataInput {
  courseMessages: CourseMessageUpdateManyWithoutUserInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  picture: String
  role: Role
  updatedAt: DateTime
}

input UserUpdateWithWhereUniqueWithoutCoursesInput {
  data: UserUpdateWithoutCoursesDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCourseMessagesInput {
  create: UserCreateWithoutCourseMessagesInput!
  update: UserUpdateWithoutCourseMessagesDataInput!
}

input UserUpsertWithWhereUniqueWithoutCoursesInput {
  create: UserCreateWithoutCoursesInput!
  update: UserUpdateWithoutCoursesDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  courseMessages: CourseMessageFilter
  courses: CourseFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  picture: NullableStringFilter
  role: Role
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
